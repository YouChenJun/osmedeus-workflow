name: vulnscan
desc: Run common Jaeles Signature

report:
  final:
    - "{{.Output}}/vuln/active/{{.Workspace}}-report.html"
    - "{{.Output}}/vuln/sensitive/{{.Workspace}}-sensitive.html"
    - "{{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei.html"
    - "{{.Output}}/vuln/active/jaeles-summary.txt"
    - "{{.Output}}/vuln/active/"
    - "{{.Storages}}/assets/{{.Workspace}}/activescan-{{.Workspace}}.txt"
    - "{{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt"

# osmedeus scan -m this_file.yaml -T list_existing_ws.txt -p 'sign="custom"'
params:
  - httpFile: "{{.Output}}/portscan/http-running.txt"
  - sign: "~/.jaeles/base-signatures/cves/.*"
  - sign2: "~/.jaeles/base-signatures/common/.*"
  - sign3: "~/.jaeles/base-signatures/sensitive/.*"
  - final: "sensitive"
  - nuclei: "true"
  - jaelesThreads: "100"
  - nucleiThreads: "200"
  - splitLines: "500"
  - limit: "100000"
  - out: "{{.Output}}/vuln"
  # in case we want to add -p 'dest=xx.burpcollab.net' or something
  - extra: " "

pre_run:
  - CreateFolder("{{.Output}}/vuln")
  - CreateFolder("{{.Output}}/vuln/raw")
  - CreateFolder("{{.Storages}}/assets/{{.Workspace}}")

steps:
  # prepare input for Jaeles
  - required:
      - "{{.httpFile}}"
    scripts:
      - SplitFile("{{.httpFile}}", "{{.Workspace}}-index", {{.splitLines}}, "{{.Output}}/vuln/raw")

  # run jaeles with all products signatures each [[.line]] at a time
  - required:
      - "{{.Binaries}}/jaeles"
    source: "{{.Output}}/vuln/raw/{{.Workspace}}-index"
    threads: '1'
    commands:
      - "{{.Binaries}}/jaeles scan -c {{.jaelesThreads}} -s '{{.sign}}' -s '{{.sign2}}' -U [[.line]] -o {{.Output}}/vuln/active/ {{.extra}}"
      - "{{.Binaries}}/jaeles scan --fi -c {{.jaelesThreads}} -s '{{.sign3}}' -L 2 -U [[.line]] -o {{.Output}}/vuln/sensitive/ {{.extra}}"
    scripts:
      - ExecCmd('cat "{{.Output}}/vuln/active/jaeles-summary.txt" >> {{.Storages}}/assets/{{.Workspace}}/activescan-{{.Workspace}}.txt')
      - ExecCmd('{{.Binaries}}/jaeles report -o {{.Output}}/vuln/active/ -R {{.Output}}/vuln/active/{{.Workspace}}-report.html')
      - ExecCmd('cat "{{.Output}}/vuln/sensitive/jaeles-summary.txt" >> {{.Storages}}/assets/{{.Workspace}}/sensitive-{{.Workspace}}.txt')
      - ExecCmd('{{.Binaries}}/jaeles report -o {{.Output}}/vuln/sensitive/ -R {{.Output}}/vuln/sensitive/{{.Workspace}}-sensitive.html')

  # prepare input for Jaeles
  - required:
      - "{{.Output}}/vuln/active/jaeles-summary.txt"
    commands:
      - "{{.Binaries}}/jaeles report -o {{.Output}}/vuln/active/ -R {{.Output}}/vuln/active/{{.Workspace}}-report.html"
      - "{{.Binaries}}/jaeles report -o {{.Output}}/vuln/sensitive/ -R {{.Output}}/vuln/sensitive/{{.Workspace}}-sensitive.html"

  # noti report to telegram
  - required:
      - "{{.Output}}/vuln/active/jaeles-summary.txt"
    commands:
      - cp {{.Output}}/vuln/active/jaeles-summary.txt {{.Output}}/vuln/active/activescan-{{.Workspace}}-{{.TS}}.txt
    scripts:
      - TeleMessByFile("#report", "{{.Output}}/vuln/active/activescan-{{.Workspace}}-{{.TS}}.txt")
      - Cat("{{.Output}}/vuln/active/activescan-{{.Workspace}}-{{.TS}}.txt")

  - required:
      - "{{.Output}}/vuln/sensitive/jaeles-summary.txt"
    commands:
      - cp {{.Output}}/vuln/sensitive/jaeles-summary.txt {{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt
    scripts:
      - TeleMessByFile("#sensitive", "{{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt")
      - Cat("{{.Output}}/vuln/active/activescan-{{.Workspace}}-{{.TS}}.txt")

  # nuclei scan
  - conditions:
      - '"{{.nuclei}}" == "true"'
    required:
      - "{{.httpFile}}"
      - "{{.Binaries}}/nuclei"
    scripts:
      - CreateFolder('{{.Output}}/vuln/nuclei')
      - "ExecCmd(\"{{.Binaries}}/nuclei -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4581.0 Safari/537.36' -silent -c {{.nucleiThreads}} -json -severity critical,high,medium,low -t ~/nuclei-templates/ -l {{.httpFile}} -irr -o {{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei-json.txt\")"
      - GenNucleiReport('{{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei-json.txt', '{{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei.html')
      # noti to telegram if anything found
      - ExecCmd("cat {{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei-json.txt | jq -r '[.info.severity,.\"template-id\",.\"matched-at\"] | join(\" - \")' > {{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei-scan.txt")
      - TeleMessByFile("#sensitive", "{{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei-scan.txt")
      - Cat("{{.Output}}/vuln/nuclei/{{.Workspace}}-nuclei-scan.txt")
