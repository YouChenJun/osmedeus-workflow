name: portscan
desc: portscan on 65k ports

report:
  final:
    - "{{Output}}/portscan/beautify-http-{{Workspace}}.txt"
    - "{{Output}}/portscan/open-ports.txt"
    - "{{Output}}/portscan/http-running.txt"
    - "{{Output}}/portscan/ssl-info.txt"

params:
  - inputFile: "{{Target}}"
  - ports: "0-65535"
  - rateRustScan: "{{ threads * 1000}}"
  - httpThreads: "{{ threads * 12}}"
  - skipPortscan: "false"
  - httpTimeout: "10"

pre_run:
  - CreateFolder("{{Storages}}/ports/{{Workspace}}")
  - CreateFolder("{{Output}}/portscan")

steps:
  # do port scan first
  - conditions:
      - '"{{skipPortscan}}" != "true"'
    required:
      - '{{Binaries}}/metabigor'
    commands:
      - "cat {{inputFile}} | {{Binaries}}/metabigor scan --rate {{rateRustScan}} -p {{ports}} --pipe >> {{Output}}/portscan/raw-open-ports.txt"
    scripts:
      - CleanRustScan("{{Output}}/portscan/raw-open-ports.txt", "{{Output}}/portscan/open-ports.txt")

  # if skipping portscan then take input file as open ports
  - conditions:
      - '"{{skipPortscan}}" == "true"'
    commands:
      - "cp {{InputFile}} {{Output}}/portscan/open-ports.txt"

  # detect http running on open ports and TLS info
  - required:
      - "{{Output}}/portscan/open-ports.txt"
    commands:
      - "cat {{Output}}/portscan/open-ports.txt | {{Binaries}}/httpx -t {{httpThreads}} -nf -timeout {{httpTimeout}} -tls-grab -json -tls-probe > {{Output}}/portscan/ssl-info.txt"
      - "cat {{Output}}/portscan/open-ports.txt | {{Binaries}}/httpx -t {{httpThreads}} -nf -timeout {{httpTimeout}} -no-color -json -title -tech-detect -status-code -silent >> {{Output}}/portscan/http-overview-{{Workspace}}.txt"
    scripts:
      - ExecCmd("cat {{Output}}/portscan/http-overview-{{Workspace}}.txt | jq -r '.url'  | sort -u  > {{Output}}/portscan/http-running.txt")
      - Copy('{{Output}}/portscan/http-running.txt', '{{Storages}}/ports/{{Workspace}}/httpport-{{Workspace}}.txt')
      - CleanJSONHttpx('{{Output}}/portscan/http-overview-{{Workspace}}.txt', '{{Output}}/portscan/{{Workspace}}-overview.txt')
      - ExecCmd("cat {{Output}}/portscan/{{Workspace}}-overview.txt | csvtk pretty --no-header-row -I -s ' | ' -W 75 > {{Output}}/portscan/beautify-http-{{Workspace}}.txt")
      - Cat('{{Output}}/portscan/beautify-http-{{Workspace}}.txt')

  # backup output to storage
  - scripts:
      - Copy("{{Output}}/portscan/open-ports.txt", "{{Storages}}/ports/{{Workspace}}/portscan-{{Workspace}}.txt")
      - Copy("{{Output}}/portscan/http-running.txt", "{{Storages}}/ports/{{Workspace}}/http-port-{{Workspace}}.txt")
